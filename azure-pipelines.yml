# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: DemoAg

variables:
  imageName: 'lalitkr2506/azurerepo:$(build.buildNumber)'

steps:
- task: SonarQubeAnalyze@5
- task: SonarQubePrepare@5
  inputs:
    scannerMode: 'MSBuild'
    projectKey: 'mytestproject_dotnet-job'
    projectName: 'DemoProject'
- task: SonarQubePublish@5

  inputs:
    pollingTimeoutSec: '300'
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $token = [System.Text.Encoding]::UTF8.GetBytes($env:SonarToken + ":")
      $base64 = [System.Convert]::ToBase64String($token)
       
      $basicAuth = [string]::Format("Basic {0}", $base64)
      $headers = @{ Authorization = $basicAuth }
       
      $result = Invoke-RestMethod -Method Get -Uri http://alegrisource.westeurope.cloudapp.azure.com/api/qualitygates/project_status?projectKey=alegri-cockpit20 -Headers $headers
      $result | ConvertTo-Json | Write-Host
       
      if ($result.projectStatus.status -eq "OK") {
      Write-Host "Quality Gate Succeeded"
      }else{
      throw "Quality gate failed"
      }
- task: Docker@1
  displayName: 'Build an image'
  inputs:
    command: Build an image
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: dockerHub
    dockerFile: Dockerfile
    imageName: $(imageName)
    restartPolicy: always

- task: Docker@1
  displayName: 'Push an image'
  inputs:
    command: Push an image
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: dockerHub
    dockerFile: Dockerfile
    imageName: $(imageName)
    restartPolicy: always